syntax = "proto3";
option go_package = "github.com/liyuu127/go-practise/gRPC/greeter/helloworld";
package helloworld;

// gRPC 支持定义 4 种类型的服务方法，分别是简单模式、服务端数据流模式、客户端数据流模式和双向数据流模式。
//
// 简单模式（Simple RPC）：是最简单的 gRPC 模式。客户端发起一次请求，服务端响应一个数据。
// 定义格式为 rpc SayHello (HelloRequest) returns (HelloReply) {}。
//
// 服务端数据流模式（Server-side streaming RPC）：客户端发送一个请求，服务器返回数据流响应，客户端从流中读取数据直到为空。
// 定义格式为 rpc SayHello (HelloRequest) returns (stream HelloReply) {}。
//
// 客户端数据流模式（Client-side streaming RPC）：客户端将消息以流的方式发送给服务器，服务器全部处理完成之后返回一次响应。
// 定义格式为 rpc SayHello (stream HelloRequest) returns (HelloReply) {}。
//
// 双向数据流模式（Bidirectional streaming RPC）：客户端和服务端都可以向对方发送数据流，这个时候双方的数据可以同时互相发送，也就是可以实现实时交互 RPC 框架原理。
// 定义格式为 rpc SayHello (stream HelloRequest) returns (stream HelloReply) {}。

//go:generate protoc -I. --experimental_allow_proto3_optional --go_out=. --go_opt=paths=source_relative  --go-grpc_out=. --go-grpc_opt=paths=source_relative helloworld.proto

service Greeter{
  rpc SayHello(HelloRequest) returns (HelloReply){}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}



service User {
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
}

message GetUserRequest {
  string class = 1;
  optional string username = 2;
  optional string user_id = 3;
}

message GetUserResponse {
  string class = 1;
  string user_id = 2;
  string username = 3;
  string address = 4;
  string sex = 5;
  string phone = 6;
}